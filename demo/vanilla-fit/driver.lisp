(load "utility.lisp")
(load "linf-fit.lisp")
(load "find-extrema.lisp")

(defun numerical-derivative (function &optional (eps (ash 1 30)))
  (lambda (x)
    (let* ((bits  (double-float-bits x))
           (x-eps (double-float-from-bits (- bits eps)))
           (x+eps (double-float-from-bits (+ bits eps))))
      (/ (- (funcall function x+eps) (funcall function x-eps))
         (- x+eps x-eps)))))

(defun find-approximation (degree from to function &optional derivative)
  (let* ((*dimension* (1+ degree))
         (*loc-value* function)
         (*loc-dvalue* (or derivative
                           (numerical-derivative function)))
         (from (round-to-double (min from to)))
         (to   (round-to-double (max from to)))
         (count (ash 1 12))
         (points (make-array (1+ count) :adjustable t :fill-pointer 0)))
    (loop with stride = (/ (- to from) count)
          for i upto count
          for x = (+ from (* i stride))
          do (vector-push-extend (make-point (round-to-double x))
                                 points))
    (loop for i upfrom 1 do
      (multiple-value-bind (diff coefs)
          (solve-fit points)
        (multiple-value-bind (actual-diff new-extrema maximin-distance)
            (find-error-extrema coefs points)
          (let ((new-count (length new-extrema)))
            (format t "Iteration ~4D: ~e ~e [~e] (~A new extrema, delta ~,2F bit)~%"
                    i diff actual-diff (- actual-diff diff)
                    ;; (float diff 1d0) (float actual-diff 1d0)
                    ;; (float (- actual-diff diff) 1d0)
                    new-count
                    (if (plusp maximin-distance)
                        (log maximin-distance 2d0)
                        0))
            (when (or (eql diff actual-diff) (zerop new-count))
              (unless (eql diff actual-diff)
                (format t "Warning: could not find new extremal points despite incomplete constraint set!"))
              (return (values diff coefs))))
          (loop for extremum in new-extrema do
            (vector-push-extend (make-point extremum) points)))))))
